- name: firewalld is installed
  yum:
      name: firewalld
      update_cache: yes
      state: latest

- name: firewalld is running
  service:
      name: firewalld.service
      enabled: yes
      state: started

- name: get firewall state
  firewall_cmd:
      state: get
  register: firewalld_state

- name: fail if firewalld not running
  fail:
      msg: "Firewalld is not running"
  when: not firewalld_state['firewalld']['running']

- name: add missing zones
  firewall_cmd_zone:
      name: "{{item}}"
      state: present
  with_items: "{{ firewalld_zone_configs.keys() }}"

- name: remove extra zones
  firewall_cmd_zone:
      name: "{{item}}"
      state: absent
  with_items: "{{ firewalld_state['firewalld']['permanent_zones'].keys() | difference(firewalld_zone_configs.keys()) }}"

- name: reload firewall from permanent
  firewall_cmd:
      state: reload

- name: configure network interfaces
  include_tasks: interface.yml
  with_items: "{{ network_interfaces.keys() }}"
  loop_control:
    loop_var: network_interface

- name: flush handlers before we get to firewalld config
  meta: flush_handlers

- name: refresh firewall state
  firewall_cmd:
      state: get
  register: firewalld_state

- name: config zones
  include_tasks: zone.yml
  vars:
      firewalld_state_: "{{ firewalld_state }}"
  with_items: "{{ firewalld_zone_configs.keys() }}"
  loop_control:
    loop_var: firewalld_zone

- name: reload firewall from permanent
  firewall_cmd:
      state: reload

- name: refresh firewall state
  firewall_cmd:
      state: get
  register: firewalld_state

- debug:
    msg: "{{firewalld_state}}"


# TODO firewalld_direct_chains

- name: add direct rules
  firewall_cmd_direct:
      family: "{{item.family}}"
      table: "{{item.table}}"
      chain: "{{item.chain}}"
      priority: "{{item.priority}}"
      rule: "{{item.rule}}"
      state: present
  with_items: "{{ firewalld_direct_rules }}"

- name: remove direct rules
  firewall_cmd_direct:
      family: "{{item.family}}"
      table: "{{item.table}}"
      chain: "{{item.chain}}"
      priority: "{{item.priority}}"
      rule: "{{item.rule}}"
      state: absent
  with_items: "{{ firewalld_state['firewalld']['permanent_direct_rules'] | difference(firewalld_direct_rules) }}"

- name: refresh firewall state
  firewall_cmd:
      state: get
  register: firewalld_state

- debug:
    msg: "{{firewalld_state}}"

- name: reload firewall from permanent
  firewall_cmd:
      state: complete-reload

- name: wait for connection to come back
  wait_for_connection:
      timeout: 10

# TODO firewalld_ipsets
# TODO firewalld_icmptypes
# TODO firewalld_services
# TODO firewalld_passthroughs
# TODO firewalld_lockdown_mode

# - name: template /etc/hosts.allow
#   template:
#       src: files/etc/hosts.allow.j2
#       dest: /etc/hosts.allow
#       mode: 0644
#       owner: root
#       group: root
#
# - name: template /etc/hosts.deny
#   template:
#       src: files/etc/hosts.deny.j2
#       dest: /etc/hosts.deny
#       mode: 0644
#       owner: root
#       group: root
